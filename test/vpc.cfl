
SET AWSInstanceType2Arch = {
	"t1.micro"    : { "Arch" : "64" },
	"m1.small"    : { "Arch" : "32" },
	"m1.large"    : { "Arch" : "64" },
	"m1.xlarge"   : { "Arch" : "64" },
	"m2.xlarge"   : { "Arch" : "64" },
	"m2.2xlarge"  : { "Arch" : "64" },
	"m2.4xlarge"  : { "Arch" : "64" },
	"c1.medium"   : { "Arch" : "32" },
	"c1.xlarge"   : { "Arch" : "64" },
	"cc1.4xlarge" : { "Arch" : "64" }
}

SET AWSRegionArch2AMI = {
	"us-east-1" : { "32" : "ami-6411e20d", "64" : "ami-7a11e213" },
	"us-west-1" : { "32" : "ami-c9c7978c", "64" : "ami-cfc7978a" },
	"eu-west-1" : { "32" : "ami-37c2f643", "64" : "ami-31c2f645" },
	"ap-southeast-1" : { "32" : "ami-66f28c34", "64" : "ami-60f28c32" },
	"ap-northeast-1" : { "32" : "ami-9c03a89d", "64" : "ami-a003a8a1" }
}

STACK vpc (string InstanceType, string WebServerPort, string KeyName) {

	MAKE SecurityGroup InstanceSecurityGroup (
	)

	MAKE LaunchConfiguration LaunchConfig (
		KeyName = KeyName,
		ImageId = AWSRegionArch2AMI[AWS::Region][AWSInstanceType2Arch[InstanceType]["Arch"]],
		UserData = Base64(WebServerPort),
		SecurityGroups = InstanceSecurityGroup,
		InstanceType = InstanceType
	)

	MAKE AutoScalingGroup WebServerGroup (
		LaunchConfigurationName = LaunchConfig,
		AvailabilityZones = GetAZs(), 
		MinSize = 1, 
		MaxSize = 3, 
		LoadBalancerNames = ElasticLoadBalancer)
	
}
