#include <string>
#include <map>
#include <vector>
#include <memory>
#include <stack>

#include "BooleanLiteral.h"
#include "NumberLiteral.h"
#include "StringLiteral.h"
#include "ArrayLiteral.h"
#include "RecordLiteral.h"
#include "RecordField.h"
#include "SymbolReference.h"
#include "FunctionCall.h"
#include "MemberCall.h"
#include "Metadata.h"
#include "Mapping.h"
#include "MappingCall.h"
#include "OperationList.h"

#include "Variable.h"
#include "Stack.h"
#include "Resource.h"
#include "Parameter.h"
#include "ConditionsTable.h"

typedef std::shared_ptr<Expression> ExpressionPtr;
typedef std::shared_ptr<RecordField> RecordFieldPtr;
typedef std::shared_ptr<Metadata> MetadataPtr;
typedef std::vector< std::shared_ptr<Expression> > ParameterList;
typedef std::vector< MetadataPtr > MetadataList;

typedef std::shared_ptr<Variable> VariablePtr;
typedef std::shared_ptr<Stack> StackPtr;
typedef std::shared_ptr<Resource> ResourcePtr;
typedef std::shared_ptr<Parameter> ParameterPtr;
typedef std::shared_ptr<Mapping> MappingPtr;
typedef std::shared_ptr<ConditionsTable> ConditionsTablePtr;

typedef std::shared_ptr<StringLiteral> StringLiteralPtr;

COMPILER CFL

	std::wstring description = L"Created using git@github.com:davidsiaw/cfl. Since this is generated code, your changes will likely be replaced.";

	std::vector<VariablePtr> variables;
	std::vector<StackPtr> stacks;
	std::vector<StringLiteralPtr> imports;
	std::vector<StringLiteralPtr> absoluteImports;
	std::vector<MappingPtr> mappings;

	std::stack<ExpressionPtr> conditions; 

	ConditionsTablePtr ctable;

CHARACTERS
	bigletter = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".
	letter    = "abcdefghijklmnopqrstuvwxyz".
	digit     = "0123456789".
	cr        = '\r'.
	lf        = '\n'.
	tab       = '\t'.
	underscore= '_'.
	colon	  = ':'.

	stringCh  = ANY - '"' - '\\' - cr - lf.
	charCh    = ANY - '\'' - '\\' - cr - lf.
	printable =  '\u0020' .. '\u007e'.
	hex       = "0123456789abcdef".
	idChars   = bigletter + letter + digit.

	anychar   = ANY.

TOKENS
	ident     = (letter | bigletter) { bigletter | letter | digit | underscore | colon colon }.
	number    = digit { digit } [ "." digit { digit } ] .

	string    = '"' { stringCh | '\\' printable } '"'.
	absimp    = '<' { stringCh | '\\' printable } '>'.
	char      = '\'' ( charCh | '\\' printable { hex } ) '\''.
	nextLine  = lf.
	comments  = '-' '-' '-' ['\r'] '\n' anychar { anychar } ['\r'] '\n' '-' '-' '-' ['\r'] '\n'.

PRAGMAS
	ddtSym    = '$' { digit | letter }. 
	optionSym = '$' letter { letter } '='
	            { digit | letter
	            | '-' | '.' | ':'
	            }.


COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

/*-------------------------------------------------------------------------*/

PRODUCTIONS

// Type productions

Boolean<ExpressionPtr &expr> =
"true" 																(. expr = ExpressionPtr(new BooleanLiteral(true)); .)
| "false"															(. expr = ExpressionPtr(new BooleanLiteral(false)); .)
.

String<ExpressionPtr &expr> = 
string 																(. expr = ExpressionPtr(new StringLiteral(t->val)); .)
.

Number<ExpressionPtr &expr> =
number 																(. expr = ExpressionPtr(new NumberLiteral(std::stold(t->val))); .)
.

Array<ExpressionPtr &expr> =										(. ExpressionPtr member; .)
																	(. ArrayLiteral* arr = new ArrayLiteral(); .)
																	(. expr = ExpressionPtr(arr); .)
"["
[
Expression<member>													(. arr->Add(member); .)
{
	"," Expression<member>											(. arr->Add(member); .)
}
]
"]"
.

RecordField<RecordFieldPtr &record> = 								(. std::wstring key; ExpressionPtr value; .)
(
	ident															(. key = t->val; .)
) 
":" 
	Expression<value>
																	(. record = RecordFieldPtr(new class RecordField(key, value)); .)
.

Record<ExpressionPtr &expr> =										(. RecordFieldPtr record; .)
																	(. RecordLiteral* rec = new RecordLiteral(); .)
																	(. expr = ExpressionPtr(rec);.)
"{"
[
	RecordField<record> 											(. rec->Add(record); .)
	{
		"," RecordField<record> 									(. rec->Add(record); .)
	}
]
"}"
.

Literal<ExpressionPtr &expr> =
(
	String<expr> | 
	Number<expr> | 
	Array<expr> | 
	Record<expr> |
	Boolean<expr>
)
.

FunctionCall<ParameterList &list> =									(. ExpressionPtr expr; .)
"("
[
	Expression<expr>												(. list.push_back(expr); .)
	{
		"," Expression<expr>										(. list.push_back(expr); .)
	}
]
")"
.

MemberCall<std::wstring &member> =
"."
ident 																(. member = t->val; .)
.

MappingCall<ExpressionPtr &expr1, ExpressionPtr &expr2> =
"["
Expression<expr1>
","
Expression<expr2>
"]"
.

Reference<ExpressionPtr &expr> = 									(. std::wstring member; .)
ident 																(. std::wstring ident = t->val; .)
																	(. expr = ExpressionPtr(new SymbolReference(ident)); .)
																	(. ParameterList paramList; .)
																	(. ExpressionPtr expr1; .)
																	(. ExpressionPtr expr2; .)
[
	FunctionCall<paramList>											(. expr = ExpressionPtr(new class FunctionCall(ident, paramList)); .)
	| MemberCall<member>											(. expr = ExpressionPtr(new class MemberCall(ident, member)); .)
	| MappingCall<expr1, expr2>										(. expr = ExpressionPtr(new class MappingCall(ident, expr1, expr2)); .)
]
.

Term<ExpressionPtr &expr> =
( Literal<expr> | Reference<expr> )
| "(" (Expression<expr>) ")"
.

BooleanBinaryOperator<std::wstring &op> =
"=="																(. op = t->val; .)
| "!="																(. op = t->val; .)
| "and"																(. op = t->val; .)
| "or"																(. op = t->val; .)
.

BinaryOperator<std::wstring &op> =
BooleanBinaryOperator<op>
.

InfixExpression<ExpressionPtr &expr> =
																	(. OperationList* list = new OperationList(ctable, expr); .)
																	(. expr = ExpressionPtr(list); .)

																	(. ExpressionPtr rhs; .)
																	(. std::wstring op;   .)

BinaryOperator<op> Term<rhs>										(. list->AddExpression(op, rhs); .)
{
	BinaryOperator<op> Term<rhs>									(. list->AddExpression(op, rhs); .)
}
.

Expression<ExpressionPtr &expr> = 
Term<expr>
[
	InfixExpression<expr>
]
.

VariableDeclaration<VariablePtr &variable> =						(. ExpressionPtr expr; .)
"SET" 
ident 																(. std::wstring identifier = t->val; .)
"=" 
Expression<expr>													(. variable = VariablePtr(new Variable(identifier, expr)); .)
.

Property<ResourcePtr resource> =									(. ExpressionPtr expr; .)
																	(. std::wstring name; .)
ident 																(. name = t->val; .)
"=" 
Expression<expr>													(. resource->AddProperty(name, expr); .)
.

ExtraMetadataInfo<MetadataPtr& metadata> =							(. ExpressionPtr expr; .)
ident 																(. std::wstring key = t->val; .)
":"
Expression<expr>													(. metadata->addInfo(key, expr); .)
.

MetadataDeclaration<MetadataPtr& metadata> =						(. ExpressionPtr expr; .)
"["
ident																(. std::wstring key = t->val; .)
":"
Expression<expr>													(. metadata = MetadataPtr(new Metadata(key, expr)); .)
{
	"," ExtraMetadataInfo<metadata>
}
"]"
.

MetadataListing<MetadataList& list> =								(. MetadataPtr metadata; .)
{
MetadataDeclaration<metadata>										(. list.push_back(metadata); .)
}
.

ResourceDeclaration<StackPtr stack> =								(. std::wstring type, name; .)
																	(. MetadataList list; .)
MetadataListing<list>
"MAKE"
ident																(. type = t->val; .)
ident																(. name = t->val; .)
																	(. ResourcePtr resource = ResourcePtr(new Resource(type, name, list)); .)
[
"("
	[
		Property<resource>
		{
			"," Property<resource>
		}
	]
")"	
]
																	(. resource->SetCondition(conditions); .)
																	(. stack->AddResource(resource); .)
.

StackParameter<StackPtr stack> =									(. std::wstring type, name; .)
																	(. ExpressionPtr expr; .)
ident																(. type = t->val; .)
ident																(. name = t->val; .)
																	(. ParameterPtr ptr(new Parameter(name, type)); .)
																	(. stack->AddParameter(ptr); .)
[
	"="
	Expression<expr>												(. ptr->setDefault(expr); .)
]
.

OutputParameter<StackPtr stack> =									(. ExpressionPtr expr; .)
																	(. std::wstring name; .)
ident 																(. name = t->val; .)
"="
Expression<expr>													(. stack->AddOutput(name, expr); .)
.

OutputDeclaration<StackPtr stack> =
"RETURN" "("
OutputParameter<stack> 																
{
	"," OutputParameter<stack>
}
")"
.

IfStatement<StackPtr stack> =										(. ExpressionPtr condExpr; .)
"if" "(" Expression<condExpr> ")" "{"								(. conditions.push(condExpr); .)
{
	StackStatement<stack>
}
"}"																	(. conditions.pop(); .)
.

StackStatement<StackPtr stack> =
ResourceDeclaration<stack> |
IfStatement<stack>
.

StackDeclaration<StackPtr &stack> =
"STACK"
ident																(. stack = StackPtr(new Stack(t->val)); .)
"("
[
	StackParameter<stack>
	{
		"," StackParameter<stack>
	}
]
")"
"{"
{
	StackStatement<stack>
}
[
	OutputDeclaration<stack>
]
"}"
.

MappingRow<MappingPtr& mapping> =									(. std::vector< std::wstring > data; .)
string 																(. std::wstring rowname = StringLiteral(t->val).getContent(); .)
"="
string 																(. data.push_back(StringLiteral(t->val).getContent()); .)
{
	"," string														(. data.push_back(StringLiteral(t->val).getContent()); .)
}
";"																	(. mapping->AddRow(rowname, data); .)
.

MappingDeclaration<MappingPtr& mapping> =
"MAPPING"
ident 																(. mapping = MappingPtr(new Mapping(t->val)); .)
"("
	string 															(. mapping->AddColumn(StringLiteral(t->val).getContent()); .)
	{
		"," string													(. mapping->AddColumn(StringLiteral(t->val).getContent()); .)
	}
")"
"{"
	{
		MappingRow<mapping>
	}
"}"
.



Statement =															(. VariablePtr variable; .)
																	(. StackPtr stack; .)
																	(. MappingPtr mapping; .)
(
	VariableDeclaration<variable>									(. variables.push_back(variable); .)
	| StackDeclaration<stack>										(. stacks.push_back(stack); .)
	| MappingDeclaration<mapping>									(. mappings.push_back(mapping); .)
)
.

Description =
comments 															(. description = t->val; .)
.

ImportStatement =
"IMPORT"
(
	string 															(. StringLiteralPtr str = StringLiteralPtr(new StringLiteral(t->val)); .)
																	(. imports.push_back(str); .)
	| absimp														(. StringLiteralPtr str = StringLiteralPtr(new StringLiteral(t->val)); .)
																	(. absoluteImports.push_back(str); .)
)
.

CFL =
[Description]
{ImportStatement}
{Statement} EOF
.

END CFL.
